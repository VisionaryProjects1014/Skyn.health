SKYN.HEALTH BACKEND DOCUMENTATION
=====================================

PROJECT OVERVIEW
-----------------
This document provides a comprehensive overview of the backend implementation for the Skyn.health website, including database setup, API endpoints, and integration details.

TECHNOLOGY STACK
-----------------
• Node.js + Express.js: Web server framework
• TypeScript: Type-safe JavaScript development
• SQLite: Lightweight, file-based database
• Zod: Runtime type validation and schema definition
• CORS: Cross-origin resource sharing middleware
• dotenv: Environment variable management
• Helmet: Security middleware
• Morgan: HTTP request logger

DATABASE ARCHITECTURE
----------------------
Database File: backend/data/skyn_health.db
Database Type: SQLite (lightweight, serverless)

TABLES:
1. subscribers
   - id (INTEGER PRIMARY KEY AUTOINCREMENT)
   - email (TEXT UNIQUE NOT NULL)
   - created_at (DATETIME DEFAULT CURRENT_TIMESTAMP)
   - source (TEXT DEFAULT 'website')
   - is_active (BOOLEAN DEFAULT 1)

2. contact_submissions
   - id (INTEGER PRIMARY KEY AUTOINCREMENT)
   - name (TEXT NOT NULL)
   - email (TEXT NOT NULL)
   - message (TEXT NOT NULL)
   - created_at (DATETIME DEFAULT CURRENT_TIMESTAMP)
   - status (TEXT DEFAULT 'new')

API ENDPOINTS
-------------

BASE URL: http://localhost:4000/api

NEWSLETTER ENDPOINTS (/api/newsletter):
• POST /
  - Purpose: Subscribe user to newsletter
  - Body: { email: string }
  - Response: { success: boolean, message: string, subscriberId?: number }
  - Features: Duplicate email prevention, validation

• GET /stats
  - Purpose: Get total subscriber count
  - Response: { count: number }

• GET /subscribers
  - Purpose: Get all subscribers (admin use)
  - Response: Array of subscriber objects

CONTACT ENDPOINTS (/api/contact):
• POST /
  - Purpose: Submit contact form
  - Body: { name: string, email: string, message: string }
  - Response: { success: boolean, message: string, submissionId?: number }

• GET /submissions
  - Purpose: Get all contact submissions (admin use)
  - Response: Array of contact submission objects

HEALTH ENDPOINT (/api/health):
• GET /
  - Purpose: Server health check
  - Response: { status: 'OK', timestamp: string }

FILE STRUCTURE
--------------
backend/
├── src/
│   ├── app.ts                 # Express app configuration
│   ├── server.ts              # Server startup
│   ├── database/
│   │   └── database.ts        # Database connection & services
│   ├── routes/
│   │   ├── newsletter.ts      # Newsletter API routes
│   │   ├── contact.ts         # Contact form API routes
│   │   └── health.ts          # Health check route
│   └── middleware/
│       ├── errorHandler.ts    # Global error handling
│       └── validate.ts        # Request validation middleware
├── data/
│   └── skyn_health.db         # SQLite database file
├── package.json               # Dependencies and scripts
└── tsconfig.json              # TypeScript configuration

FRONTEND INTEGRATION
--------------------
The frontend (React/TypeScript) integrates with the backend through:

1. Email Signup Form (src/App.tsx):
   - useState hooks for form state management
   - API call to POST /api/newsletter
   - Success/error message handling
   - Form validation and disabled states

2. API Client (src/lib/api.ts):
   - Centralized API communication
   - Error handling and response parsing
   - Base URL configuration

VALIDATION SCHEMAS
------------------
Using Zod for runtime validation:

Newsletter Schema:
{
  email: z.string().email("Invalid email address")
}

Contact Schema:
{
  name: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email address"),
  message: z.string().min(10, "Message must be at least 10 characters")
}

DATABASE SERVICES
-----------------
emailService:
• addSubscriber(email, source): Add new subscriber
• getSubscriber(email): Find subscriber by email
• getAllSubscribers(): Get all subscribers
• getSubscriberCount(): Count total subscribers

contactService:
• addContactSubmission(name, email, message): Add contact form submission
• getAllContactSubmissions(): Get all contact submissions

SECURITY FEATURES
-----------------
• CORS configuration for cross-origin requests
• Helmet middleware for security headers
• Input validation using Zod schemas
• SQL injection prevention through parameterized queries
• Error handling without exposing sensitive information

DEVELOPMENT SETUP
-----------------
1. Install dependencies:
   cd backend && npm install

2. Create data directory:
   mkdir -p data

3. Start development server:
   npm run dev

4. Backend runs on: http://localhost:4000
   Frontend runs on: http://localhost:8082

CURRENT STATUS
--------------
✅ Backend server configured and running
✅ Database schema created
✅ API endpoints implemented
✅ Frontend integration complete
✅ Email capture system functional
✅ Validation and error handling in place

⚠️  KNOWN ISSUES:
• Database connection errors in logs (SQLITE_CANTOPEN)
  - May need to recreate data directory
  - Check file permissions

DEPENDENCIES
------------
Production Dependencies:
• cors: ^2.8.5
• dotenv: ^16.3.1
• express: ^4.18.2
• helmet: ^7.0.0
• morgan: ^1.10.0
• sqlite3: ^5.1.7
• zod: ^3.23.8

Development Dependencies:
• @types/cors: ^2.8.13
• @types/express: ^4.17.17
• @types/morgan: ^1.9.4
• @types/node: ^20.4.2
• ts-node-dev: ^2.0.0
• typescript: ^5.8.3

ENVIRONMENT VARIABLES
---------------------
Create .env file in backend/ directory:
PORT=4000
NODE_ENV=development
DATABASE_PATH=./data/skyn_health.db

TESTING THE API
---------------
Example curl commands:

Subscribe to newsletter:
curl -X POST http://localhost:4000/api/newsletter \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com"}'

Submit contact form:
curl -X POST http://localhost:4000/api/contact \
  -H "Content-Type: application/json" \
  -d '{"name":"John Doe","email":"john@example.com","message":"Hello world"}'

Check health:
curl http://localhost:4000/api/health

Get subscriber stats:
curl http://localhost:4000/api/newsletter/stats

DEPLOYMENT CONSIDERATIONS
-------------------------
For production deployment:
• Set up proper environment variables
• Configure production database (PostgreSQL/MySQL)
• Set up SSL/HTTPS
• Configure reverse proxy (nginx)
• Set up monitoring and logging
• Implement rate limiting
• Add authentication for admin endpoints

NEXT STEPS
----------
1. Fix database connection issues
2. Add admin dashboard for viewing subscribers
3. Implement email sending functionality
4. Add user authentication system
5. Set up automated backups
6. Implement analytics tracking
7. Add API rate limiting

MAINTENANCE
-----------
• Regular database backups
• Monitor server logs
• Update dependencies regularly
• Performance monitoring
• Security updates

Created: January 2025
Last Updated: January 2025
Version: 1.0 